#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_under {
            timeout-ms = <65>;
            bindings = <&kp UNDER>;
            key-positions = <40 39>;
            require-prior-idle-ms = <300>;
        };

        compatible = "zmk,combos";

        combo_equals {
            timeout-ms = <65>;
            bindings = <&kp EQUAL>;
            key-positions = <>;
            require-prior-idle-ms = <300>;
        };

        compatible = "zmk,combos";

        combo_minus {
            timeout-ms = <65>;
            bindings = <&kp MINUS>;
            key-positions = <>;
            require-prior-idle-ms = <300>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        combo_enter {
            bindings = <&kp RETURN>;
            key-positions = <45 46>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        left_par_or_lt {
            bindings = <&mt LESS_THAN LEFT_PARENTHESIS>;
            key-positions = <30 31>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        right_par_or_gt {
            bindings = <&mt GREATER_THAN RIGHT_PARENTHESIS>;
            key-positions = <32 31>;
            require-prior-idle-ms = <300>;
            timeout-ms = <65>;
        };

        left_brace_or_bracket {
            bindings = <&mt LEFT_BRACKET LEFT_BRACE>;
            key-positions = <18 19>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        right_brace_or_bracket {
            bindings = <&mt RIGHT_BRACKET RIGHT_BRACE>;
            key-positions = <19 20>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        slash_pipe {
            bindings = <&mt BACKSLASH KP_SLASH>;
            key-positions = <28 29>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };
    };

    behaviors {
        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word";
            #binding-cells = <0>;
            layers = <1>;                                // insert location of numbers layer here
            continue-list = <BACKSPACE DELETE DOT COMMA>;  // adjust as desired
            ignore-numbers;                                // numbers don't deactivate the layer
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            bindings = <&mo>, <&num_dance>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&num_word>, <&sl 3>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hrr: hrr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 2 3 4>;
        };

        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 55 56 57 58 59>;
        };

        smart_show_windows: smart_show_windows {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&show_windows_and_stick_nav_l>, <&alt_tab>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_TAB";
            #binding-cells = <0>;
            bindings = <&kp LA(TAB)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    macros {
        my_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp Z>,
                <&macro_tap>,
                <&kp A>,
                <&macro_press>,
                <&kp Z>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp Z>;

            label = "NEW_MACRO";
        };

        show_windows: test_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LA(TAB)>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "TEST_ALT_TAB";
        };

        show_windows_and_stick_nav_l: show_windows_and_stick_nav_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LA(TAB)>,
                <&macro_press>,
                <&kp LEFT_ALT &mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT &mo 2>;

            label = "SHOW_WINDOWS_AND_STICK_NAV_L";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_default_layer {
            label = "default_layer";
            bindings = <
&trans           &trans           &trans           &trans                   &trans             &trans                     &trans         &trans              &trans          &trans            &trans                    &trans
&kp ESCAPE       &kp Q            &kp W            &kp E                    &kp R              &kp T                      &kp Y          &kp U               &kp I           &kp O             &kp P                     &kp DELETE
&mt TILDE GRAVE  &hrl LEFT_GUI A  &hrl LEFT_ALT S  &hrl LCTRL D             &hrl LEFT_SHIFT F  &kp G                      &kp H          &hrr RIGHT_SHIFT J  &hrr RCTRL K    &hrr RIGHT_ALT L  &hrr RIGHT_GUI SEMICOLON  &mt DOUBLE_QUOTES APOSTROPHE
&trans           &kp Z            &kp X            &kp C                    &kp V              &kp B      &trans  &trans  &kp N          &kp M               &kp KP_COMMA    &kp KP_DOT        &trans                    &trans
                 &trans           &trans           &smart_show_windows 0 0  &to 1              &kp SPACE                  &kp BACKSPACE  &mo 2               &smart_num 1 0  &trans            &trans
            >;
        };

        layer_num_layer {
            label = "num_layer";
            bindings = <
&trans  &trans           &trans        &trans        &trans        &trans                                   &trans  &trans           &trans     &trans         &trans         &trans
&trans  &trans           &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp EQUAL                                &trans  &trans           &trans     &trans         &trans         &trans
&trans  &kp KP_NUMBER_0  &kp N4        &kp NUMBER_5  &kp N6        &mt KP_MULTIPLY KP_PLUS                  &trans  &sk RIGHT_SHIFT  &sk RCTRL  &sk RIGHT_ALT  &sk RIGHT_GUI  &trans
&trans  &trans           &kp N1        &kp N2        &kp N3        &mt KP_DIVIDE KP_MINUS   &trans  &trans  &trans  &trans           &trans     &trans         &trans         &trans
        &trans           &trans        &trans        &to 0         &trans                                   &trans  &mo 2            &trans     &trans         &trans
            >;
        };

        layer_nav_layer {
            label = "nav_layer";
            bindings = <
&trans  &trans        &trans    &trans     &trans     &trans                  &trans     &trans    &trans  &trans     &trans  &trans
&trans  &trans        &trans    &trans     &trans     &trans                  &kp PG_UP  &kp HOME  &trans  &kp END    &trans  &trans
&trans  &sk LEFT_GUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans                  &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans        &trans    &trans     &trans     &trans  &trans  &trans  &trans     &trans    &trans  &trans     &trans  &trans
        &trans        &trans    &trans     &trans     &trans                  &trans     &trans    &trans  &trans     &trans
            >;
        };
    };
};
