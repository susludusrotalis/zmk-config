#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
  / combos { compatible = "zmk,combos"; combo_bspc { timeout-ms = <20>; bindings = <&hml LA(LGUI) BSPC>; key-positions = <LM3 LM2>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; };
  / combos { compatible = "zmk,combos"; combo_ret { timeout-ms = <20>; bindings = <&hml LS(LGUI) RETURN>; key-positions = <LM2 LM1>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; };

  / combos { compatible = "zmk,combos"; combo_under { timeout-ms = <50>; bindings = <&kp UNDER>; key-positions = <RT1 RT2>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; }; 
  / combos { compatible = "zmk,combos"; combo_equals { timeout-ms = <15>; bindings = <&kp EQUAL>; key-positions = <LT1 LT2>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; };
  / combos { compatible = "zmk,combos"; combo_colon { timeout-ms = <20>; bindings = <&kp COLON>; key-positions = <LT3 LT2>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; };
  / combos { compatible = "zmk,combos"; combo_minus { timeout-ms = <50>; bindings = <&kp MINUS>; key-positions = <RM3 RM4>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; };
  # 46 "combos.dsti"
  # / { combos { compatible = "zmk,combos"; combo_cut { timeout-ms = <50>; bindings = <&kp LG(X)>; key-positions = <LB3 LB1>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; }; };
  # / { combos { compatible = "zmk,combos"; combo_copy { timeout-ms = <50>; bindings = <&kp LG(C)>; key-positions = <LB3 LB2>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; }; };
  # / { combos { compatible = "zmk,combos"; combo_paste { timeout-ms = <50>; bindings = <&kp LG(V)>; key-positions = <LB2 LB1>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; }; };
  #
  #
  #
  # / { combos { compatible = "zmk,combos"; combo_del { timeout-ms = <20>; bindings = <&kp DEL>; key-positions = <RT2 RT3>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; }; };
  #
  # / { combos { compatible = "zmk,combos"; combo_lpar { timeout-ms = <20>; bindings = <&hmr_lpar_lt RS(LGUI) 0>; key-positions = <RM1 RM2>; layers = <DEF NUM>; require-prior-idle-ms = <200>; }; }; };
  # / { combos { compatible = "zmk,combos"; combo_rpar { timeout-ms = <20>; bindings = <&hmr_rpar_gt LA(LGUI) 0>; key-positions = <RM2 RM3>; layers = <DEF NUM>; require-prior-idle-ms = <200>; }; }; };
  #
  #
  #
  # / { combos { compatible = "zmk,combos"; combo_lbkt { timeout-ms = <20>; bindings = <&kp LBKT>; key-positions = <RB1 RB2>; layers = <DEF NUM>; require-prior-idle-ms = <200>; }; }; };
  # / { combos { compatible = "zmk,combos"; combo_rbkt { timeout-ms = <20>; bindings = <&kp RBKT>; key-positions = <RB2 RB3>; layers = <DEF NUM>; require-prior-idle-ms = <200>; }; }; };
  # / { combos { compatible = "zmk,combos"; combo_lbrc { timeout-ms = <20>; bindings = <&kp LBRC>; key-positions = <RB1 RB2>; layers = <NAV>; require-prior-idle-ms = <200>; }; }; };
  # / { combos { compatible = "zmk,combos"; combo_rbrc { timeout-ms = <20>; bindings = <&kp RBRC>; key-positions = <RB2 RB3>; layers = <NAV>; require-prior-idle-ms = <200>; }; }; };
  #
  # / { combos { compatible = "zmk,combos"; combo_grk { timeout-ms = <20>; bindings = <&sl UC>; key-positions = <RT1 RT3>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; }; };
  # / { combos { compatible = "zmk,combos"; combo_cpgrk { timeout-ms = <20>; bindings = <&sls 0>; key-positions = <RT1 RT2 RT3>; layers = <DEF NAV NUM>; require-prior-idle-ms = <200>; }; }; };
  #
  macros {
  de_ae_lower:
    de_ae_lower {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_ae_lower";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N0 &kp N0 &kp E &kp N4>, <&macro_tap &kp RET>;
    };
  };


  macros {
  de_ae_upper:
    de_ae_upper {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_ae_upper";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N0 &kp N0 &kp C &kp N4>, <&macro_tap &kp RET>;
    };
  };


  behaviors {
  de_ae:
    de_ae {
      compatible = "zmk,behavior-mod-morph";
      label = "UC_MORPH_de_ae";
      binding - cells = <0>;
      bindings = <&de_ae_lower>, <&de_ae_upper>;
      mods = <(MOD_LSFT | MOD_RSFT)>;
    };
  };


  macros {
  de_oe_lower:
    de_oe_lower {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_oe_lower";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N0 &kp N0 &kp F &kp N6>, <&macro_tap &kp RET>;
    };
  };

  macros {
  de_oe_upper:
    de_oe_upper {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_oe_upper";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N0 &kp N0 &kp D &kp N6>, <&macro_tap &kp RET>;
    };
  };

  behaviors {
  de_oe:
    de_oe {
      compatible = "zmk,behavior-mod-morph";
      label = "UC_MORPH_de_oe";
      binding - cells = <0>;
      bindings = <&de_oe_lower>, <&de_oe_upper>;
      mods = <(MOD_LSFT | MOD_RSFT)>;
    };
  };

  macros {
  de_ue_lower:
    de_ue_lower {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_ue_lower";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N0 &kp N0 &kp F &kp C>, <&macro_tap &kp RET>;
    };
  };

  macros {
  de_ue_upper:
    de_ue_upper {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_ue_upper";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N0 &kp N0 &kp D &kp C>, <&macro_tap &kp RET>;
    };
  };

  behaviors {
  de_ue:
    de_ue {
      compatible = "zmk,behavior-mod-morph";
      label = "UC_MORPH_de_ue";
      binding - cells = <0>;
      bindings = <&de_ue_lower>, <&de_ue_upper>;
      mods = <(MOD_LSFT | MOD_RSFT)>;
    };
  };

  macros {
  de_eszett_lower:
    de_eszett_lower {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_eszett_lower";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N0 &kp N0 &kp D &kp F>, <&macro_tap &kp RET>;
    };
  };

  macros {
  de_eszett_upper:
    de_eszett_upper {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_de_eszett_upper";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N1 &kp E &kp N9 &kp E>, <&macro_tap &kp RET>;
    };
  };

  behaviors {
  de_eszett:
    de_eszett {
      compatible = "zmk,behavior-mod-morph";
      label = "UC_MORPH_de_eszett";
      binding - cells = <0>;
      bindings = <&de_eszett_lower>, <&de_eszett_upper>;
      mods = <(MOD_LSFT | MOD_RSFT)>;
    };
  };

# 7 "sofle.keymap" 2
# 19 "sofle.keymap"

  behaviors {
  hrm:
    hrm {
      label = "ZB_hrm";
      compatible = "zmk,behavior-hold-tap";
      #binding - cells = < 2>;
      flavor = "balanced";
      tapping - term - ms = <280>;
      quick - tap - ms = <125>;
      bindings = <&kp>, <&kp>;
    };
  };

  behaviors {
  ss_cw:
    ss_cw {
      label = "ZB_ss_cw";
      compatible = "zmk,behavior-tap-dance";
      #binding - cells = < 0>;
      tapping - term - ms = <200>;
      bindings = <&sk LSHFT>, <&caps_word>;
    };
  };

  behaviors {
  bs_del_num:
    bs_del_num {
      label = "ZB_bs_del_num";
      compatible = "zmk,behavior-mod-morph";
      #binding - cells = < 0>;
      bindings = <&lt 1 BSPC>, <&kp DEL>;
      mods = <(MOD_LSFT | MOD_RSFT)>;
    };
  };

  behaviors {
  win_sleep:
    win_sleep {
      label = "ZB_win_sleep";
      compatible = "zmk,behavior-macro";
      #binding - cells = < 0>;
      wait - ms = <100>;
      tap - ms = <5>;
      bindings = <&kp LG(X) &kp U &kp S>;
    };
  };

  macros {
  euro_sign_lower:
    euro_sign_lower {
      compatible = "zmk,behavior-macro";
      label = "UC_MACRO_euro_sign_lower";
      wait - ms = <0>;
      tap - ms = <0>;
      binding - cells = <0>;
      bindings = <&macro_tap &kp RALT &kp U>,
      <&macro_tap &kp N2 &kp N0 &kp A &kp C>, <&macro_tap &kp RET>;
    };
  };

  behaviors {
  euro_sign:
    euro_sign {
      compatible = "zmk,behavior-mod-morph";
      label = "UC_MORPH_euro_sign";
      binding - cells = <0>;
      bindings = <&euro_sign_lower>, <&none>;
      mods = <(MOD_LSFT | MOD_RSFT)>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if
        -layers = <2 1>;
      then - layer = <GER>;
    };
  };

  keymap {
    compatible = "zmk,keymap";
    layer_default_layer {
      label = "default_layer";
      bindings =
          <&kp Q &kp W &kp W &kp F &kp P &kp B &kp J &kp L &kp U 
	   &kp Y &kp Y &kp SQT &hrm LGUI A &hrm LALT R &hrm LALT R 
	   &hrm LCTRL S &hrm LSHFT T &kp G &kp M &hrm RSHFT N &hrm LCTRL E 
	   &hrm LALT I &hrm LALT I &hrm LGUI O &kp Z &kp X &kp X &kp C 
	   &kp D &kp V &kp K &kp H &kp COMMA &kp DOT &kp DOT &kp SEMI 
	   &kp ESC &lt 2 SPACE &kp TAB &kp RET &bs_del_num &ss_cw>;

    };

    layer_num_layer {
      label = "num_layer";
       bindings =
                 <&kp ESC &kp N7 &kp N7 &kp N8 &kp N9 &kp STAR &trans &trans 
                  &trans &trans &trans &trans &kp TAB &kp N4 &kp N4 &kp N5 
                  &kp N6 &kp PLUS &trans &sk RSHFT &sk LCTRL &sk LALT &sk LALT 
                  &sk LGUI &kp RET &kp N1 &kp N1 &kp N2 &kp N3 &kp FSLH &trans 
                  &trans &trans &trans &trans &trans &kp DOT &kp N0 &kp MINUS 
                  &trans &trans &trans>;
           };

    layer_nav_layer {
      label = "nav_layer";
      bindings =
          <&trans &trans &trans &trans &trans &trans &kp PG_UP &kp HOME 
           &kp UP &kp END &kp END &kp INS &sk LGUI &sk LALT &sk LALT 
           &sk LCTRL &sk LSHFT &trans &kp PG_DN &kp LEFT &kp DOWN 
           &kp RIGHT &kp RIGHT &kp DEL &trans &trans &trans &trans 
           &trans &trans &trans &kp LC(X) &kp LC(INS) &kp LS(INS) 
           &kp LS(INS) &trans &trans &trans &trans &trans &trans &trans>;
    };
  };
};
