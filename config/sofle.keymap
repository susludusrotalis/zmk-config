#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_under {
            timeout-ms = <50>;
            bindings = <&kp UNDER>;
            key-positions = <40 41>;
            require-prior-idle-ms = <300>;
        };

        compatible = "zmk,combos";

        combo_equals {
            timeout-ms = <50>;
            bindings = <&kp EQUAL>;
            key-positions = <>;
            require-prior-idle-ms = <300>;
        };

        compatible = "zmk,combos";

        combo_minus {
            timeout-ms = <50>;
            bindings = <&kp MINUS>;
            key-positions = <45 46>;
            require-prior-idle-ms = <300>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <38 39>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        combo_enter {
            bindings = <&kp RETURN>;
            key-positions = <44 45>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        left_par_or_lt {
            bindings = <&mt LESS_THAN LEFT_PARENTHESIS>;
            key-positions = <30 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        right_par_or_gt {
            bindings = <&mt GREATER_THAN RIGHT_PARENTHESIS>;
            key-positions = <32 31>;
            require-prior-idle-ms = <300>;
            timeout-ms = <50>;
        };

        left_brace_or_bracket {
            bindings = <&mt LEFT_BRACKET LEFT_BRACE>;
            key-positions = <18 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        right_brace_or_bracket {
            bindings = <&mt RIGHT_BRACKET RIGHT_BRACE>;
            key-positions = <19 20>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        slash_pipe {
            bindings = <&mt BACKSLASH KP_SLASH>;
            key-positions = <28 29>;
            timeout-ms = <50>;
            require-prior-idle-ms = <400>;
        };
    };

    behaviors {
        hrm: hrm {
            label = "ZB_hrm";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hrr: hrr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRR";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 2 3 4>;
        };

        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HRL";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 55 56 57 58 59>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_default_layer {
            label = "default_layer";
            bindings = <
&trans           &trans           &trans           &trans        &trans             &trans                     &trans         &trans              &trans        &trans            &trans                    &trans
&kp ESCAPE       &kp Q            &kp W            &kp E         &kp R              &kp T                      &kp Y          &kp U               &kp I         &kp O             &kp P                     &kp DELETE
&mt TILDE GRAVE  &hrl LEFT_GUI A  &hrl LEFT_ALT S  &hrl LCTRL D  &hrl LEFT_SHIFT F  &kp G                      &kp H          &hrr RIGHT_SHIFT J  &hrr RCTRL K  &hrr RIGHT_ALT L  &hrr RIGHT_GUI SEMICOLON  &mt DOUBLE_QUOTES APOSTROPHE
&trans           &kp Z            &kp X            &kp C         &kp V              &kp B      &trans  &trans  &kp N          &kp M               &kp KP_COMMA  &kp KP_DOT        &trans                    &trans
                 &trans           &trans           &trans        &to 1              &kp SPACE                  &kp BACKSPACE  &mo 2               &trans        &trans            &trans
            >;
        };

        layer_num_layer {
            label = "num_layer";
            bindings = <
&trans  &trans           &trans        &trans        &trans        &trans                                   &trans  &trans           &trans     &trans         &trans         &trans
&trans  &trans           &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_EQUAL                             &trans  &trans           &trans     &trans         &trans         &trans
&trans  &trans           &kp N4        &kp NUMBER_5  &kp N6        &mt KP_MULTIPLY KP_PLUS                  &trans  &sk RIGHT_SHIFT  &sk RCTRL  &sk RIGHT_ALT  &sk RIGHT_GUI  &trans
&trans  &kp KP_NUMBER_0  &kp N1        &kp N2        &kp N3        &mt KP_MINUS KP_DIVIDE   &trans  &trans  &trans  &trans           &trans     &trans         &trans         &trans
        &trans           &trans        &trans        &to 0         &trans                                   &trans  &mo 2            &trans     &trans         &trans
            >;
        };

        layer_nav_layer {
            label = "nav_layer";
            bindings = <
&trans  &trans        &trans    &trans     &trans     &trans                  &trans     &trans    &trans    &trans     &trans  &trans
&trans  &trans        &trans    &trans     &trans     &trans                  &kp PG_UP  &kp HOME  &kp UP    &kp END    &trans  &trans
&trans  &sk LEFT_GUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans                  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans        &trans    &trans     &trans     &trans  &trans  &trans  &trans     &trans    &trans    &trans     &trans  &trans
        &trans        &trans    &trans     &trans     &trans                  &trans     &trans    &trans    &trans     &trans
            >;
        };
    };
};
