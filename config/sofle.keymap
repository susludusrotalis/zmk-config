#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_bspc {
            timeout-ms = <20>;
            bindings = <&hml LA(LGUI) BSPC>;
            key-positions = <14 15>;
            layers = <1 3 2>;
            require-prior-idle-ms = <200>;
        };

        compatible = "zmk,combos";

        combo_ret {
            timeout-ms = <20>;
            bindings = <&hml LS(LGUI) RETURN>;
            key-positions = <15 16>;
            layers = <1 3 2>;
            require-prior-idle-ms = <200>;
        };

        compatible = "zmk,combos";

        combo_under {
            timeout-ms = <50>;
            bindings = <&kp UNDER>;
            key-positions = <7 8 30 31>;
            layers = <1 3 2>;
            require-prior-idle-ms = <200>;
        };

        compatible = "zmk,combos";

        combo_equals {
            timeout-ms = <15>;
            bindings = <&kp EQUAL>;
            key-positions = <4 3>;
            layers = <1 3 2>;
            require-prior-idle-ms = <200>;
        };

        compatible = "zmk,combos";
        compatible = "zmk,combos";

        combo_minus {
            timeout-ms = <50>;
            bindings = <&kp MINUS>;
            key-positions = <21 22>;
            layers = <1 3 2>;
            require-prior-idle-ms = <200>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
        };

        combo_enter {
            bindings = <&kp RETURN>;
            key-positions = <32 33>;
            timeout-ms = <200>;
            require-prior-idle-ms = <50>;
        };

        left_par_or_lt {
            bindings = <&mt LESS_THAN LEFT_PARENTHESIS>;
            key-positions = <18 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
        };

        right_par_or_gt {
            bindings = <&mt GREATER_THAN RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        left_brace_or_bracket {
            bindings = <&mt LEFT_BRACKET LEFT_BRACE>;
            key-positions = <6 7>;
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
        };

        right_brace_or_bracket {
            bindings = <&mt RIGHT_BRACKET RIGHT_BRACE>;
            key-positions = <7 8>;
        };

        zero {
            bindings = <&kp KP_NUMBER_0>;
            key-positions = <25 26>;
            layers = <1>;
            timeout-ms = <20>;
            require-prior-idle-ms = <20>;
        };

        slash_pipe {
            bindings = <&mt BACKSLASH KP_SLASH>;
            key-positions = <16 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
        };
    };

    macros {
        de_ae_lower: de_ae_lower {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_ae_lower";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp E &kp N4>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    macros {
        de_ae_upper: de_ae_upper {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_ae_upper";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp C &kp N4>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    behaviors {
        de_ae: de_ae {
            compatible = "zmk,behavior-mod-morph";
            label = "UC_MORPH_de_ae";
            #binding = - cells,,, <0>;

            bindings = <&de_ae_lower>, <&de_ae_upper>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };

    macros {
        de_oe_lower: de_oe_lower {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_oe_lower";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp F &kp N6>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    macros {
        de_oe_upper: de_oe_upper {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_oe_upper";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp D &kp N6>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    behaviors {
        de_oe: de_oe {
            compatible = "zmk,behavior-mod-morph";
            label = "UC_MORPH_de_oe";
            #binding = - cells,,, <0>;

            bindings = <&de_oe_lower>, <&de_oe_upper>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };

    macros {
        de_ue_lower: de_ue_lower {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_ue_lower";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp F &kp C>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    macros {
        de_ue_upper: de_ue_upper {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_ue_upper";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp D &kp C>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    behaviors {
        de_ue: de_ue {
            compatible = "zmk,behavior-mod-morph";
            label = "UC_MORPH_de_ue";
            #binding = - cells,,, <0>;

            bindings = <&de_ue_lower>, <&de_ue_upper>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };

    macros {
        de_eszett_lower: de_eszett_lower {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_eszett_lower";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N0 &kp N0 &kp D &kp F>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    macros {
        de_eszett_upper: de_eszett_upper {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_de_eszett_upper";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N1 &kp E &kp N9 &kp E>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    behaviors {
        de_eszett: de_eszett {
            compatible = "zmk,behavior-mod-morph";
            label = "UC_MORPH_de_eszett";
            #binding = - cells,,, <0>;

            bindings = <&de_eszett_lower>, <&de_eszett_upper>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };
# 19 "sofle.keymap"

    behaviors {
        hrm: hrm {
            label = "ZB_hrm";
            compatible = "zmk,behavior-hold-tap";
            #binding = - cells,,, < 2>;

            flavor = "balanced";
            tapping = - term - ms,,, <280>;

            quick = - tap - ms,,, <125>;

            bindings = <&kp>, <&kp>;
        };
    };

    behaviors {
        ss_cw: ss_cw {
            label = "ZB_ss_cw";
            compatible = "zmk,behavior-tap-dance";
            #binding = - cells,,, < 0>;

            tapping = - term - ms,,, <200>;

            bindings = <&sk LSHFT>, <&caps_word>;
        };
    };

    behaviors {
        bs_del_num: bs_del_num {
            label = "ZB_bs_del_num";
            compatible = "zmk,behavior-mod-morph";
            #binding = - cells,,, < 0>;

            bindings = <&lt 1 BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };

    behaviors {
        win_sleep: win_sleep {
            label = "ZB_win_sleep";
            compatible = "zmk,behavior-macro";
            #binding = - cells,,, < 0>;

            wait = - ms,,, <100>;

            tap = - ms,,, <5>;

            bindings = <&kp LG(X) &kp U &kp S>;
        };
    };

    macros {
        euro_sign_lower: euro_sign_lower {
            compatible = "zmk,behavior-macro";
            label = "UC_MACRO_euro_sign_lower";
            wait = - ms,,, <0>;

            tap = - ms,,, <0>;

            #binding = - cells,,, <0>;

            bindings =
                <&macro_tap>,
                <&kp RALT &kp U>,
                <&macro_tap>,
                <&kp N2 &kp N0 &kp A &kp C>,
                <&macro_tap>,
                <&kp RET>;
        };
    };

    behaviors {
        euro_sign: euro_sign {
            compatible = "zmk,behavior-mod-morph";
            label = "UC_MORPH_euro_sign";
            #binding = - cells,,, <0>;

            bindings = <&euro_sign_lower>, <&none>;

            mods = <(MOD_LSFT | MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if = -layers,,, <2 1>;

            then -

            layer = <GER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_default_layer {
            label = "default_layer";
            bindings = <
&kp ESCAPE &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp DELETE
&mt TILDE GRAVE &hrm LEFT_GUI A &hrm LALT R &hrm LCTRL S &hrm LSHFT T &kp G &kp H &hrm RSHFT J &hrm LCTRL K &hrm LALT L &hrm RIGHT_GUI SEMICOLON &mt DOUBLE_QUOTES APOSTROPHE
&trans &kp Z &kp X &kp C &kp D &kp V &kp K &kp H &kp COMMA &kp DOT &kp DOT &trans
                                               &trans &mo 1 &kp SPACE &kp BACKSPACE &mo 2 &trans
            >;
        };

        layer_num_layer {
            label = "num_layer";
            bindings = <
&trans &trans &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp KP_EQUAL &trans &trans &trans &trans &trans &trans
&trans &trans &kp N4 &kp NUMBER_5 &kp N6 &mt KP_MULTIPLY KP_PLUS &trans &sk RIGHT_SHIFT &sk RCTRL &kp RIGHT_ALT &sk RIGHT_GUI &trans
&trans &trans &kp N1 &kp N2 &kp N3 &mt KP_MINUS KP_DIVIDE &trans &trans &trans &trans &trans &trans
                              &trans &trans &trans &trans &trans &trans
            >;
        };

        layer_nav_layer {
            label = "nav_layer";
            bindings = <
&trans &trans &trans &trans &trans &trans &kp PG_UP &kp HOME &kp UP &kp END &kp END &trans
&trans &sk LEFT_GUI &sk LALT &sk LCTRL &sk LSHFT &trans &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RIGHT &trans
&trans &trans &trans &trans &trans &trans &trans &kp LC(X) &kp LC(INS) &kp LS(INS) &kp LS(INS) &trans
                                &trans &trans &trans &trans &trans &trans
            >;
        };
    };
};
