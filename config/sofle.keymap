#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    require-prior-idle-ms = <350>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_under {
            timeout-ms = <65>;
            bindings = <&mt UNDER KP_MINUS>;
            key-positions = <15 16>;
            require-prior-idle-ms = <300>;
        };

        compatible = "zmk,combos";

        combo_equals {
            timeout-ms = <65>;
            bindings = <&mt PLUS KP_EQUAL>;
            key-positions = <19 20>;
            require-prior-idle-ms = <300>;
        };

        compatible = "zmk,combos";

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <39 40>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        combo_enter {
            bindings = <&kp RETURN>;
            key-positions = <45 46>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        left_par_or_lt {
            bindings = <&mt LESS_THAN LEFT_PARENTHESIS>;
            key-positions = <>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        right_par_or_gt {
            bindings = <&mt GREATER_THAN RIGHT_PARENTHESIS>;
            key-positions = <>;
            require-prior-idle-ms = <300>;
            timeout-ms = <65>;
        };

        left_brace_or_bracket {
            bindings = <&mt LEFT_BRACKET LEFT_BRACE>;
            key-positions = <18 19>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        right_brace_or_bracket {
            bindings = <&mt RIGHT_BRACKET RIGHT_BRACE>;
            key-positions = <19 20>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        slash_pipe {
            bindings = <&mt BACKSLASH KP_SLASH>;
            key-positions = <28 29>;
            timeout-ms = <65>;
            require-prior-idle-ms = <300>;
        };

        eng_lang {
            bindings = <&eng_lang>;
            key-positions = <31 32>;
        };

        ru_lang {
            bindings = <&ru_lang>;
            key-positions = <27 28>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <40 41>;
        };
    };

    behaviors {
        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word";
            #binding-cells = <0>;
            layers = <1>;                                // insert location of numbers layer here
            continue-list = <BACKSPACE DELETE DOT COMMA LEFT_SHIFT RSHIFT EXCLAMATION AT_SIGN POUND PERCENT CARET AMPERSAND ASTERISK LEFT_PARENTHESIS RIGHT_PARENTHESIS KP_LEFT_PARENTHESIS KP_RIGHT_PARENTHESIS KP_EQUAL KP_MINUS>;  // adjust as desired
            ignore-numbers;                                // numbers don't deactivate the layer
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            bindings = <&mo>, <&num_dance>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&num_word>, <&sl 3>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hrr: hrr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 2 3 4>;
            require-prior-idle-ms = <350>;
        };

        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 55 56 57 58 59>;
            require-prior-idle-ms = <350>;
        };

        smart_show_windows: smart_show_windows {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&show_windows>, <&alt_tab>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_TAB";
            #binding-cells = <0>;
            bindings = <&kp LA(TAB)>;
        };

        ru_lang: ru_lang {
            compatible = "zmk,behavior-tap-dance";
            label = "RU_LANG";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(N9))>;
            tapping-term-ms = <100>;
        };

        eng_lang: eng_lang {
            compatible = "zmk,behavior-tap-dance";
            label = "ENG_LANG";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp LS(LA(NUMBER_8))>;
        };

        i_or_paren: i_or_paren {
            compatible = "zmk,behavior-mod-morph";
            label = "I_OR_PAREN";
            bindings = <&kp I>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        o_or_paren: o_or_paren {
            compatible = "zmk,behavior-mod-morph";
            label = "O_OR_PAREN";
            bindings = <&kp O>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        k_or_curly: k_or_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "K_OR_CURLY";
            bindings = <&kp K>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        l_or_curly: l_or_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "L_OR_CURLY";
            bindings = <&kp L>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        comma_lt_square: comma_lt_square {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_LT_SQUARE";
            bindings = <&kp COMMA>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        dot_gt_square: dot_gt_square {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_GT_SQUARE";
            bindings = <&kp DOT>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        hrr_k: hrr_k {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&k_or_curly>;

            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 2 3 4>;
            require-prior-idle-ms = <350>;
            label = "HRR_K";
        };

        hrr_l: hrr_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&l_or_curly>;

            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53 54 2 3 4>;
            require-prior-idle-ms = <350>;
            label = "HRR_L";
        };

        i_paren_asterisk: i_paren_asterisk {
            compatible = "zmk,behavior-hold-tap";
            label = "I_PAREN_ASTERISK";
            bindings = <&kp>, <&i_or_paren>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };

    macros {
        my_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp Z>,
                <&macro_tap>,
                <&kp A>,
                <&macro_press>,
                <&kp Z>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp Z>;

            label = "NEW_MACRO";
        };

        show_windows: test_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &mo 2>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT &mo 2>;

            label = "TEST_ALT_TAB";
        };

        show_windows_and_stick_nav_l: show_windows_and_stick_nav_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LA(TAB)>,
                <&macro_press>,
                <&kp LEFT_ALT &mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT &mo 2>;

            label = "SHOW_WINDOWS_AND_STICK_NAV_L";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_default_layer {
            label = "default_layer";
            bindings = <
&trans           &trans             &trans           &trans                   &trans             &trans                         &trans         &trans              &trans                     &trans              &trans               &trans
&kp ESCAPE       &mt EXCLAMATION Q  &mt AT_SIGN W    &mt HASH E               &mt DOLLAR R       &mt PERCENT T                  &mt CARET Y    &mt AMPERSAND U     &i_paren_asterisk ASTRK 0  &o_or_paren         &kp P                &kp LEFT_BRACKET
&mt TILDE GRAVE  &hrl LEFT_GUI A    &hrl LEFT_ALT S  &hrl LCTRL D             &hrl LEFT_SHIFT F  &kp G                          &kp H          &hrr RIGHT_SHIFT J  &hrr_k RCTRL 0             &hrr_l RIGHT_ALT 0  &hrr RIGHT_GUI SEMI  &mt DOUBLE_QUOTES APOSTROPHE
&trans           &kp Z              &kp X            &kp C                    &kp V              &kp B          &trans  &trans  &kp N          &kp M               &comma_lt_square           &dot_gt_square      &kp SLASH            &kp LEFT_BRACE
                 &trans             &trans           &smart_show_windows 0 0  &smart_num 1 0     &kp SPACE                      &kp BACKSPACE  &mo 2               &trans                     &trans              &trans
            >;
        };

        layer_num_layer {
            label = "num_layer";
            bindings = <
&trans  &trans                    &trans                &trans             &trans               &trans                                &trans              &trans                  &trans                 &trans                         &trans                    &trans
&trans  &mt EXCLAMATION NUMBER_1  &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3  &mt DOLLAR NUMBER_4  &mt PERCENT NUMBER_5                  &mt CARET NUMBER_6  &mt AMPERSAND NUMBER_7  &mt ASTERISK NUMBER_8  &mt LEFT_PARENTHESIS NUMBER_9  &mt KP_NUMBER_0 NUMBER_0  &trans
&trans  &trans                    &trans                &trans             &trans               &trans                                &trans              &trans                  &trans                 &trans                         &trans                    &trans
&trans  &trans                    &trans                &trans             &trans               &trans                &trans  &trans  &trans              &trans                  &trans                 &trans                         &trans                    &trans
        &trans                    &trans                &trans             &to 0                &trans                                &trans              &mo 2                   &trans                 &trans                         &trans
            >;
        };

        layer_nav_layer {
            label = "nav_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans     &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp PG_UP  &kp HOME  &trans  &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans     &trans  &trans
        &trans  &trans  &trans  &trans  &trans                  &trans     &trans    &trans  &trans     &trans
            >;
        };
    };
};
